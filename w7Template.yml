AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with public, private subnets and VPC endpoints for DynamoDB & CloudWatch Logs

Resources:

################################################## VPC Resources ##################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: todo-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: Public-1 }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: Public-2 }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: Private-1 }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: Private-2 }]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Associate private subnets
  PrivateSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # DynamoDB Endpoint
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
      RouteTableIds: [!Ref PrivateRouteTable]

  

################################################### ECR Resources ##################################################

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: todo-repo
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["latest"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: todo-repo


# ################################################### Security Groups and Load Balancers ##################################################

#   ALBSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Allow HTTP traffic from internet
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 80
#           ToPort: 80
#           CidrIp: 0.0.0.0/0

#   ECSSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Allow traffic from ALB only
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 2020
#           ToPort: 2020
#           SourceSecurityGroupId: !Ref ALBSecurityGroup
#       SecurityGroupEgress:
#         - IpProtocol: tcp
#           FromPort: 443
#           ToPort: 443
#           CidrIp: 0.0.0.0/0
#           Description: Allow HTTPS outbound for ECR API calls
        

#   ApplicationLoadBalancer:
#     Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#     Properties:
#       Name: todo-alb
#       Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
#       SecurityGroups: [!Ref ALBSecurityGroup]
#       Scheme: internet-facing
#       Type: application
#       LoadBalancerAttributes:
#         - Key: idle_timeout.timeout_seconds
#           Value: "60"

#   BlueTargetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       Name: todo-blue-tg
#       Port: 2020
#       Protocol: HTTP
#       VpcId: !Ref VPC
#       TargetType: ip
#       HealthCheckPath: /actuator/health
#       HealthCheckProtocol: HTTP
#       HealthCheckPort: 2020
#       HealthCheckIntervalSeconds: 30
#       Matcher:
#         HttpCode: 200

#   GreenTargetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       Name: todo-green-tg
#       Port: 2020
#       Protocol: HTTP
#       VpcId: !Ref VPC
#       TargetType: ip
#       HealthCheckPath: /actuator/health
#       HealthCheckProtocol: HTTP
#       HealthCheckPort: 2020
#       HealthCheckIntervalSeconds: 30
#       Matcher:
#         HttpCode: 200

#   ALBListener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       LoadBalancerArn: !Ref ApplicationLoadBalancer
#       Port: 80
#       Protocol: HTTP
#       DefaultActions:
#         - Type: forward
#           TargetGroupArn: !Ref BlueTargetGroup


#   ALBTestListener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       LoadBalancerArn: !Ref ApplicationLoadBalancer
#       Port: 8080
#       Protocol: HTTP
#       DefaultActions:
#         - Type: fixed-response
#           FixedResponseConfig:
#             StatusCode: 404
#             ContentType: text/plain
#             MessageBody: "No default test target group. CodeDeploy owns this listener."
  


# ################################################### ECS ##########################################

#   LogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: todo-log-group
#       RetentionInDays: 14

#   ECSCluster:
#     Type: AWS::ECS::Cluster
#     Properties:
#       ClusterName: todo-cluster
#       CapacityProviders: [FARGATE, FARGATE_SPOT]
#       DefaultCapacityProviderStrategy:
#         - CapacityProvider: FARGATE
#           Weight: 1
#         - CapacityProvider: FARGATE_SPOT
#           Weight: 4
#       ClusterSettings:
#         - Name: containerInsights
#           Value: enabled


#   TaskExecutionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: todo-ecs-execution-role
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: ecs-tasks.amazonaws.com
#             Action: sts:AssumeRole
#       ManagedPolicyArns:
#         - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    

#   TaskRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: todo-ecs-task-role
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: ecs-tasks.amazonaws.com
#             Action: sts:AssumeRole
#       Policies:
#       - PolicyName: DynamoDBAccess
#         PolicyDocument:
#           Version: "2012-10-17"
#           Statement:
#             - Effect: Allow
#               Action:
#                 - dynamodb:PutItem
#                 - dynamodb:GetItem
#                 - dynamodb:UpdateItem
#                 - dynamodb:DeleteItem
#                 - dynamodb:Scan
#                 - dynamodb:Query
#               Resource: arn:aws:dynamodb:*:*:table/TodoTable


#   TaskDefinition:
#     Type: AWS::ECS::TaskDefinition
#     Properties:
#       Family: todo-task
#       NetworkMode: awsvpc
#       RequiresCompatibilities: 
#         - FARGATE
#       Cpu: 512
#       Memory: 1024
#       ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
#       TaskRoleArn: !GetAtt TaskRole.Arn
#       ContainerDefinitions:
#         - Name: todo-container
#           Image: 343218213563.dkr.ecr.eu-west-1.amazonaws.com/todo-repo:latest
#           PortMappings:
#             - ContainerPort: 2020
#           LogConfiguration:
#             LogDriver: awslogs
#             Options:
#               awslogs-group: !Ref LogGroup
#               awslogs-region: !Ref AWS::Region
#               awslogs-stream-prefix: ecs
#           HealthCheck:
#             Command: 
#               - CMD-SHELL
#               - "curl -f http://localhost:2020/actuator/health || exit 1"
#             Interval: 30
#             Timeout: 10
#             Retries: 3
#             StartPeriod: 60
#       Tags:
#         - Key: Name
#           Value: todo-task


#   ECSService:
#     Type: AWS::ECS::Service
#     DependsOn: 
#       - ALBListener
#       - ALBTestListener
#     Properties:
#       ServiceName: todo-service
#       LaunchType: FARGATE
#       Cluster: !Ref ECSCluster
#       DesiredCount: 2
#       TaskDefinition: !Ref TaskDefinition
#       DeploymentController:
#         Type: CODE_DEPLOY
#       NetworkConfiguration:
#         AwsvpcConfiguration:
#           AssignPublicIp: DISABLED
#           Subnets:
#             - !Ref PrivateSubnet1
#             - !Ref PrivateSubnet2
#           SecurityGroups:
#             - !Ref ECSSecurityGroup
#       LoadBalancers:  
#         - ContainerName: todo-container
#           ContainerPort: 2020
#           TargetGroupArn: !Ref BlueTargetGroup  


# ########################################## Code Deploy #################################################

#   CodeDeployApplication:
#     Type: AWS::CodeDeploy::Application
#     Properties:
#       ApplicationName: todo-app
#       ComputePlatform: ECS


#   CodeDeployRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: todo-codedeploy-role
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: codedeploy.amazonaws.com
#             Action: sts:AssumeRole
#       Policies:
#         - PolicyName: CodeDeployECSInlinePolicy
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - ecs:*
#                   - elasticloadbalancing:*
#                   - codedeploy:*
#                   - iam:PassRole
#                   - cloudwatch:*
#                 Resource: "*"

#   ECSBlueGreenDeployment:
#     Type: AWS::CodeDeploy::DeploymentGroup
#     DependsOn: CodeDeployApplication
#     Properties:
#       ApplicationName: !Ref CodeDeployApplication
#       DeploymentGroupName: todo-deployment-group
#       ServiceRoleArn: !GetAtt CodeDeployRole.Arn
#       DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
#       DeploymentStyle:
#         DeploymentType: BLUE_GREEN
#         DeploymentOption: WITH_TRAFFIC_CONTROL
#       ECSServices:
#         - ClusterName: todo-cluster
#           ServiceName: todo-service
#       LoadBalancerInfo:
#         TargetGroupPairInfoList:
#           - TargetGroups:
#               - Name: todo-blue-tg
#               - Name: todo-green-tg
#             ProdTrafficRoute:
#               ListenerArns:
#                 - !Ref ALBListener
#             TestTrafficRoute:
#               ListenerArns:
#                 - !Ref ALBTestListener
#       BlueGreenDeploymentConfiguration:
#         TerminateBlueInstancesOnDeploymentSuccess:
#           Action: TERMINATE
#           TerminationWaitTimeInMinutes: 1
#         DeploymentReadyOption:
#           ActionOnTimeout: CONTINUE_DEPLOYMENT


# ############################################## Code Pipeline #################################################
 
#   CodePipelineArtifactBucket:
#     Type: AWS::S3::Bucket
#     Properties:
#       BucketName: week-seven-todo-artifact-bucket
#       VersioningConfiguration:
#         Status: Enabled


#   CodePipelineRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: todo-codepipeline-role
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: codepipeline.amazonaws.com
#             Action: sts:AssumeRole
#           - Effect: Allow
#             Principal:
#               Service: events.amazonaws.com
#             Action: sts:AssumeRole
#       Policies:
#         - PolicyName: FullPipelineAccess
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - s3:*
#                 Resource:
#                   - arn:aws:s3:::week-seven-todo-artifact-bucket
#                   - arn:aws:s3:::week-seven-todo-artifact-bucket/*

#               - Effect: Allow
#                 Action:
#                   - ecs:RegisterTaskDefinition
#                   - ecs:DescribeServices
#                   - ecs:UpdateService
#                 Resource: '*'

#               - Effect: Allow
#                 Action:
#                   - codedeploy:*
#                 Resource: '*'
#               - Effect: Allow
#                 Action:
#                   - iam:PassRole
#                 Resource: '*'

#               - Effect: Allow
#                 Action:
#                   - logs:*
#                   - cloudwatch:*
#                 Resource: '*'

#               - Effect: Allow
#                 Action:
#                   - ecr:GetAuthorizationToken
#                   - ecr:BatchCheckLayerAvailability
#                   - ecr:GetDownloadUrlForLayer
#                   - ecr:BatchGetImage
#                 Resource: '*'

#               - Effect: Allow
#                 Action:
#                   - events:*
#                 Resource: '*'

#               - Effect: Allow
#                 Action: 
#                   - codepipeline:StartPipelineExecution
#                 Resource: '*'


#   CodePipeline:
#     Type: AWS::CodePipeline::Pipeline
#     Properties:
#       Name: todo-pipeline
#       RoleArn: !GetAtt CodePipelineRole.Arn
#       ArtifactStore:
#         Type: S3
#         Location: !Ref CodePipelineArtifactBucket
#       RestartExecutionOnUpdate: true
#       Stages:
#         - Name: Source
#           Actions:
#             - Name: SourceAction
#               ActionTypeId:
#                 Category: Source
#                 Owner: AWS
#                 Provider: S3
#                 Version: 1
#               OutputArtifacts:
#                 - Name: SourceOutput
#               Configuration:
#                 S3Bucket: !Ref CodePipelineArtifactBucket
#                 S3ObjectKey: source.zip
#                 PollForSourceChanges: false
#               RunOrder: 1

#         - Name: Deploy
#           Actions:
#             - Name: DeployToECS
#               ActionTypeId:
#                 Category: Deploy
#                 Owner: AWS
#                 Provider: CodeDeployToECS
#                 Version: 1
#               InputArtifacts:
#                 - Name: SourceOutput
#               Configuration:
#                 ApplicationName: todo-app
#                 DeploymentGroupName: todo-deployment-group
#                 TaskDefinitionTemplateArtifact: SourceOutput
#                 AppSpecTemplateArtifact: SourceOutput
#                 AppSpecTemplatePath: appspec.yaml
#                 TaskDefinitionTemplatePath: taskdef.json
#               RunOrder: 1


# ############################################### Event Bridge Rule #################################################

#   ECRPushEventRule:
#     Type: AWS::Events::Rule
#     Properties:
#       Name: todo-ecr-push-rule
#       Description: 'Trigger pipeline when new image is pushed to ECR'
#       EventPattern:
#         source: ["aws.ecr"]
#         detail-type: ["ECR Image Action"]
#         detail:
#           action-type: ["PUSH"]
#           repository-name:
#             - todo-repo
#           result: ["SUCCESS"]
#       State: ENABLED
#       Targets:
#         - Arn: arn:aws:codepipeline:eu-west-1:343218213563:todo-pipeline
#           Id: "CodePipelineTarget"
#           RoleArn: !GetAtt CodePipelineRole.Arn


# Outputs:
#   VPCId:
#     Value: !Ref VPC

#   PrivateSubnet1Id:
#     Description: Private Subnet 1 ID
#     Value: !Ref PrivateSubnet1

#   PrivateSubnet2Id:
#     Description: Private Subnet 2 ID
#     Value: !Ref PrivateSubnet2

#   ECRRepositoryURI:
#     Description: ECR Repository URI
#     Value: !GetAtt ECRRepository.RepositoryUri
  
#   ECRRepositoryArn:
#     Description: ECR Repository ARN
#     Value: !GetAtt ECRRepository.Arn

#   ECSSecurityGroupId:
#     Description: ECS Security Group ID
#     Value: !Ref ECSSecurityGroup
